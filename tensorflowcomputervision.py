# -*- coding: utf-8 -*-
"""TensorflowComputerVision.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wPZbjJzpgl-bp47BVD3Y5UkEKBdKjypz
"""

import numpy as np
import tensorflow as tf
# tensor is multi-dimenstional array of datatypes

"""# Tensors

---


"""

tensor_zero_d=tf.constant(4)
print(tensor_zero_d)

tensor_two_d=tf.constant([[8,9,0,34.54,78],
                         [8,9,0,34.54,78],
                         [8,9,0,34.54,78],
                         [8,9,0,34.54,78]]
                        ,dtype='float64')
tensor_two_d

# 3d Tensor
tensor_3d=tf.constant([[[78,98],
                        [89,76]],

                        [[789,968],
                        [809,776]],
                        ])
print(tensor_3d)

# to know shape of tensor
tensor_3d.shape

#how to convert numpy array in tensor
arr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])
tf.convert_to_tensor(arr)

# how to make identity matrix
tf.eye(
    num_rows=2,
    num_columns=2,
    batch_shape=[2,],
    dtype=tf.dtypes.float32,
    name=None
)

# to make tensor of same value
tensor1=tf.fill(
    dims=[2,3],
    value=9
)

# to make similar matix
tf.ones_like(tensor1)

print(tf.rank(tensor1))

random_tensor=tf.random.normal(
    (4,3),
    mean=790,
    stddev=1,
    dtype=tf.dtypes.float64,
    seed=None,
    name=None
)
print(random_tensor)

"""# Indexing

---












"""

tensor=tf.random.normal(
    (7,7),
    mean=10.0,
    stddev=1.0,
    dtype=tf.dtypes.float32,
    seed=None,
    name=None
)
print(tensor)
tensor[0,1]

# to get certain sequence elements
print(tensor[:,2])
print(tensor[1:3,2:3])

tensor_3d

"""# Mathematical Function

---


"""

# abs function works as mod which returns magnitude of number/vector
tensor=tf.random.normal((2,3),mean=0,stddev=1.0)
print(tensor)
tf.math.abs(tensor)

# addition of matrix
ten1=tf.random.normal((1,5),mean=10,stddev=2,dtype=tf.float32)
ten2=tf.random.normal((1,5),mean=10,stddev=2,dtype=tf.float32)
tf.math.add(ten1,ten2)

ten3=tf.random.normal((1,3),mean=10,stddev=2,dtype=tf.float32)
ten4=tf.random.normal((5,1),mean=10,stddev=2,dtype=tf.float32)
tf.math.multiply(ten4,ten3)# to multiply each corresponding elements with each other

"""# Linear Algebra
---
"""

# multiplyig matrix
tsr1=tf.random.normal(
    shape=(2,7),
    mean=10.0,
    stddev=1.0,
    dtype=tf.dtypes.float32,
    seed=None,
    name=None
)
tsr2=tf.random.normal(
    shape=(2,7),
    mean=10.0,
    stddev=1.0,
    dtype=tf.dtypes.float32,
    seed=None,
    name=None
)
tsr3=tf.random.normal(
    shape=(7,7),
    mean=10.0,
    stddev=1.0,
    dtype=tf.dtypes.float32,
    seed=None,
    name=None
)
tf.linalg.matmul(
    a=tsr1,
    b=tsr2,
    transpose_a=True,
    transpose_b=False,
    adjoint_a=False,
    adjoint_b=False,
    a_is_sparse=False,
    b_is_sparse=False,
    output_type=None,
    name=None
)
tsr2@tsr3 #other way to multiply

tf.linalg.matrix_rank(tsr2)

tf.linalg.matrix_transpose(tsr2)

